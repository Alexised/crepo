// <auto-generated />
using System;
using CargaAmbulatoria.EntityFramework.DataBase;
using Microsoft.EntityFrameworkCore;
using Microsoft.EntityFrameworkCore.Infrastructure;
using Microsoft.EntityFrameworkCore.Metadata;
using Microsoft.EntityFrameworkCore.Migrations;
using Microsoft.EntityFrameworkCore.Storage.ValueConversion;

#nullable disable

namespace CargaAmbulatoria.EntityFramework.Migrations
{
    [DbContext(typeof(CargaAmbulatoriaDbContext))]
    [Migration("20220801063408_AddPasswordTries")]
    partial class AddPasswordTries
    {
        protected override void BuildTargetModel(ModelBuilder modelBuilder)
        {
#pragma warning disable 612, 618
            modelBuilder
                .HasAnnotation("ProductVersion", "6.0.5")
                .HasAnnotation("Relational:MaxIdentifierLength", 128);

            SqlServerModelBuilderExtensions.UseIdentityColumns(modelBuilder, 1L, 1);

            modelBuilder.Entity("CargaAmbulatoria.EntityFramework.Models.Cohort", b =>
                {
                    b.Property<long>("CohortId")
                        .ValueGeneratedOnAdd()
                        .HasColumnType("bigint");

                    SqlServerPropertyBuilderExtensions.UseIdentityColumn(b.Property<long>("CohortId"), 1L, 1);

                    b.Property<string>("Name")
                        .IsRequired()
                        .HasColumnType("nvarchar(max)");

                    b.HasKey("CohortId");

                    b.ToTable("Cohorts");

                    b.HasData(
                        new
                        {
                            CohortId = 1L,
                            Name = "ERC"
                        });
                });

            modelBuilder.Entity("CargaAmbulatoria.EntityFramework.Models.Document", b =>
                {
                    b.Property<long>("DocumentId")
                        .ValueGeneratedOnAdd()
                        .HasColumnType("bigint");

                    SqlServerPropertyBuilderExtensions.UseIdentityColumn(b.Property<long>("DocumentId"), 1L, 1);

                    b.Property<long>("CohortId")
                        .HasColumnType("bigint");

                    b.Property<string>("Dni")
                        .IsRequired()
                        .HasColumnType("nvarchar(max)");

                    b.Property<DateTime>("DocumentDate")
                        .HasColumnType("datetime2");

                    b.Property<string>("Name")
                        .IsRequired()
                        .HasMaxLength(100)
                        .HasColumnType("nvarchar(100)");

                    b.Property<string>("Path")
                        .IsRequired()
                        .HasMaxLength(500)
                        .HasColumnType("nvarchar(500)");

                    b.Property<string>("Regime")
                        .IsRequired()
                        .HasColumnType("nvarchar(max)");

                    b.Property<string>("UserId")
                        .IsRequired()
                        .HasColumnType("nvarchar(450)");

                    b.HasKey("DocumentId");

                    b.HasIndex("CohortId");

                    b.HasIndex("UserId");

                    b.ToTable("Documents");
                });

            modelBuilder.Entity("CargaAmbulatoria.EntityFramework.Models.User", b =>
                {
                    b.Property<string>("UserId")
                        .HasColumnType("nvarchar(450)");

                    b.Property<string>("Email")
                        .IsRequired()
                        .HasMaxLength(50)
                        .HasColumnType("nvarchar(50)");

                    b.Property<string>("Name")
                        .IsRequired()
                        .HasMaxLength(100)
                        .HasColumnType("nvarchar(100)");

                    b.Property<string>("PasswordStored")
                        .IsRequired()
                        .HasMaxLength(80)
                        .HasColumnType("nvarchar(80)");

                    b.Property<int>("PasswordTries")
                        .HasColumnType("int");

                    b.Property<int>("Role")
                        .HasColumnType("int");

                    b.Property<int>("Status")
                        .HasColumnType("int");

                    b.Property<string>("TokenReset")
                        .HasColumnType("nvarchar(max)");

                    b.Property<DateTime?>("TokenResetExpiration")
                        .HasColumnType("datetime2");

                    b.HasKey("UserId");

                    b.HasIndex("Email")
                        .IsUnique();

                    b.ToTable("Users");

                    b.HasData(
                        new
                        {
                            UserId = "4838d0f2-319f-4fe6-b442-5528d91827c3",
                            Email = "admin@coosalud.com",
                            Name = "Admin",
                            PasswordStored = "NhPGnizPnx4RQRSNWFXaRw==",
                            PasswordTries = 0,
                            Role = 0,
                            Status = 0
                        },
                        new
                        {
                            UserId = "c54b49ae-29b8-48e8-b31b-170977c51ef4",
                            Email = "agent@coosalud.com",
                            Name = "Agent",
                            PasswordStored = "NhPGnizPnx4RQRSNWFXaRw==",
                            PasswordTries = 0,
                            Role = 1,
                            Status = 0
                        });
                });

            modelBuilder.Entity("CargaAmbulatoria.EntityFramework.Models.Document", b =>
                {
                    b.HasOne("CargaAmbulatoria.EntityFramework.Models.Cohort", "Cohort")
                        .WithMany()
                        .HasForeignKey("CohortId")
                        .OnDelete(DeleteBehavior.Cascade)
                        .IsRequired();

                    b.HasOne("CargaAmbulatoria.EntityFramework.Models.User", "User")
                        .WithMany()
                        .HasForeignKey("UserId")
                        .OnDelete(DeleteBehavior.Cascade)
                        .IsRequired();

                    b.Navigation("Cohort");

                    b.Navigation("User");
                });
#pragma warning restore 612, 618
        }
    }
}
